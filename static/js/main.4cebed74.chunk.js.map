{"version":3,"sources":["getWeb3.js","homepage/Nav.js","homepage/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Nav","useState","show","setShow","navbarControl","scrollY","innerHeight","useEffect","removeEventListener","className","class","href","src","width","height","alt","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","Homepage","options","fpsLimit","background","color","repeat","size","backgroundMode","particles","number","value","density","value_area","links","distance","opacity","move","speed","random","minimumValue","animation","text","cursorRenderer","cursor","displayTextRenderer","i","split","map","char","key","style","for","target","Date","getFullYear","App","state","storageValue","accounts","contract","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","SimpleStorageContract","networks","instance","Contract","abi","address","setState","runExample","error","methods","get","call","response","this","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cebed74.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useEffect, useState } from 'react'\n\nconst Nav = () => {\n\n    const homePath = 'https://pollyreal1.github.io/prestruct/';\n\n    const [show, setShow] = useState(false);\n    const navbarControl = () => {\n        if (window.scrollY > window.innerHeight * 0.70) {\n            setShow(true)\n        } else {\n            setShow(false)\n        }\n    }\n\n\n    useEffect(() =>{\n        window.addEventListener('scroll', navbarControl)\n        return () => window.removeEventListener('scroll', navbarControl)\n        \n    },[])\n\n    return (\n        <div>\n            {/* <nav className={'navbar navbar-expand-lg navbar-dark'}> */}\n            <nav className={show ? 'navbar navbar-expand-lg fixed-top navbar-dark navbar-effect-in' : 'navbar navbar-expand-lg fixed-top navbar-dark navbar-effect-out'}>\n                <div class=\"container-fluid\">\n                    <a class=\"navbar-brand\" href=\"#\">\n                        <img src={`${homePath}/construct.png`} width=\"75\" height=\"75\" alt=\"\" />\n                        <b>Prestruct</b>\n                    </a>\n                    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span class=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                        <div class=\"navbar-nav ms-auto\">\n                            {/* <a class=\"nav-link active\" aria-current=\"page\" href=\"#\"><b>Home</b></a> */}\n                            <a class=\"nav-link\" href=\"#\"><b>Developers</b></a>\n                            <a class=\"nav-link\" href=\"#\"><b>Individuals</b></a>\n                            <a class=\"nav-link\" href=\"#\"><b>News</b></a>\n                            {/* <a class=\"nav-link disabled\">Disabled</a> */}\n                        </div>\n                    </div>\n                </div>\n            </nav>\n        </div>\n    )\n}\n\nexport default Nav\n","import React from 'react'\nimport Particles from \"react-tsparticles\"\nimport ReactTypingEffect from 'react-typing-effect'\n\nimport Nav from './Nav'\n\nconst Homepage = () => {\n\n    const path = 'https://pollyreal1.github.io/prestruct/';\n\n    const particlesInit = (main) => {\n        console.log(main);\n    };\n\n    const particlesLoaded = (container) => {\n        console.log(container);\n    }\n\n    return (\n        <div>\n            <Particles\n                id=\"tsparticles\"\n                // init={particlesInit}\n                // loaded={particlesLoaded}\n                options={{\n                    fpsLimit: 75,\n                    background: {\n                        color: \"#000000\",\n                        repeat: 'no-repeat',\n                        size: 'cover',\n                    },\n                    backgroundMode: {\n                        enable: true\n                    },\n                    // interactivity: {\n                    //   detectsOn: 'window',\n                    //   events: {\n                    //     onClick: {\n                    //       enable: true,\n                    //       mode: \"push\",\n                    //     },\n                    //     onHover: {\n                    //       enable: true,\n                    //       mode: \"repulse\",\n                    //     },\n                    //     resize: true,\n                    //   },\n                    //   modes: {\n                    //     bubble: {\n                    //       distance: 400,\n                    //       duration: 2,\n                    //       opacity: 0.8,\n                    //       size: 40,\n                    //     },\n                    //     push: {\n                    //       quantity: 4,\n                    //     },\n                    //     repulse: {\n                    //       distance: 200,\n                    //       duration: 0.4,\n                    //     },\n                    //   },\n                    // },\n                    particles: {\n                        number: {\n                            value: 60,\n                            density: {\n                                enable: true,\n                                value_area: 1000\n                            }\n                        },\n                        color: {\n                            value: [\"#6C3BF4\", \"#4F70F5\", \"#31A8F7\"]\n                        },\n                        links: {\n                            color: \"#F226E6\",\n                            enable: true,\n                            // Change here for many links\n                            distance: 150,\n                            opacity: 0.5,\n                            width: 2,\n                        },\n                        move: {\n                            enable: true,\n                            speed: 1,\n                        },\n                        size: {\n                            value: 5,\n                            random: {\n                                enable: true,\n                                minimumValue: 1\n                            },\n                            animation: {\n                                enable: true,\n                                speed: 2.5,\n                                minimumValue: 1\n                            }\n                        },\n                        opacity: {\n                            value: 0.8,\n                            random: {\n                                enable: true,\n                                minimumValue: 0.4\n                            }\n                        }\n                    }\n                }}\n            />\n\n            {/* Navbar */}\n            <Nav></Nav>\n\n            {/* Content */}\n            <div class=\"position-relative container text-light\">\n\n                <div class=\"header-construct\">\n                    <div class=\"row\">\n                        <div class=\"col-lg-6 col-md-12 col-sm-12\">\n                            <h1>\n                                It Begins With&nbsp;\n                                <ReactTypingEffect\n                                    text={['Decentralization', 'People', 'Blockchain', 'Network']}\n                                    cursorRenderer={cursor => <h1>{cursor}</h1>}\n                                    displayTextRenderer={(text, i) => {\n                                        return (\n                                            <>\n                                                {text.split('').map((char, i) => {\n                                                    const key = `${i}`;\n                                                    return (\n                                                        <span\n                                                            key={key}\n                                                            style={{ color: '#3ee1ec' }}\n                                                        >{char}</span>\n                                                    );\n                                                })}\n                                            </>\n                                        );\n                                    }}\n                                />\n                            </h1>\n                            <h5 class=\"text-muted\"><span style={{ color: '#31A8F7' }}>Prestruct</span> is a network for building the most effecient blockchain apps for individuals and aspiring developers.</h5>\n                            <div class=\"d-flex mt-4\">\n                                <button class=\"btn btn-primary me-4\">Learn about Prestruct</button>\n                                <button class=\"btn btn-primary\">Build on Struct</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"below-header\">\n                <div class=\"container-fluid\">\n                    <div class=\"padding-top-100\">\n                        <div class=\"text-light text-center\">\n                            <h1>\n                                The Prestruct Network\n                            </h1>\n                        </div>\n                        <div class=\"text-light text-center mt-4\">\n                           <h5> With <b class=\"text-themecolor-1\">Prestruct</b>, transaction for your dapps are much faster, efficient and scalable.</h5>\n                        </div>\n                    </div>\n                    <div class=\"padding-top-100\">\n                        {/* <div class=\"d-flex flex-row\">\n                            <div class=\"box-card box-bg-1 mx-auto\">\n                                <h4>Finance Decentralized</h4>\n                                <p>You as an individuals or an organization have the power to make finance decentralized. Traditional finance has always been there but since the utilization of blockhain and cryptocurrency on the modern era, Decentralized finance has been dominating the world escaping from the shackles that define our world and breaking through the economy in much more efficient way.</p>\n                            </div>\n                            <div class=\"box-card box-bg-2 mx-auto\">\n                                <h4>Cryptocurrency usable in the real world</h4>\n                                <p>Some are still relucntant on Cryptocurrency usable in the real world. That is why we are developing the platform to make Cryptocurrency usable in the real world by providing apps and gateway to open the blockchain economy to the real world.</p>\n                            </div>\n                            <div class=\"box-card box-bg-3 mx-auto\">\n                                <h4>The future of development</h4>\n                                <p class=\"text-justify\">Integrating the use case of Web3.0 we are now on the era of blockchains and cryptography this will be start of future innovations and technology that builds the foundation of the next era. </p>\n                            </div>\n                        </div> */}\n                        \n                        <div class=\"row\">\n                            <div class=\"col-md-3 mx-auto mb-3\">\n                                <div class=\"box-card box-bg-1\">\n                                    <h4>Finance Decentralized</h4>\n                                    <p>You as an individuals or an organization have the power to make finance decentralized. Traditional finance has always been there but since the utilization of blockhain and cryptocurrency on the modern era, Decentralized finance has been dominating the world escaping from the shackles that define our world and breaking through the economy in a much more efficient way.</p>\n                                </div>\n                            </div>\n                            <div class=\"col-md-3 mx-auto mb-3\">\n                                <div class=\"box-card box-bg-2\">\n                                    <h4>Cryptocurrency usable in the real world</h4>\n                                    <p>Some are still relucntant on Cryptocurrency usable in the real world. That is why we are developing the platform to make Cryptocurrency usable in the real world by providing apps and gateway to open the blockchain economy to the real world.</p>\n                                </div>\n                            </div>\n                            <div class=\"col-md-3 mx-auto mb-3\">\n                                <div class=\"box-card box-bg-3\">\n                                    <h4>The future of development</h4>\n                                    <p class=\"text-justify\">Integrating the use case of Web3.0 we are now on the era of blockchains and cryptography this will be start of future innovations and technology that builds the foundation of the next era. With Prestruct you can deploy your own smart contracts and dapps with less cost than other networks.</p>\n                                </div>\n                            </div>\n                        </div>\n                        \n                    </div>\n                </div>\n            </div>\n\n            <div class=\"below-header-2\">\n                <div class=\"container text-light\">\n                    <div class=\"row\">\n                        <div class=\"col-md-6 mb-4 text-center text-md-start mb-auto mt-auto\">\n                            <h1>People holds the power</h1>\n                            <h5>Prestruct runs on <span class=\"text-themecolor-1\">Proof-of-Stake</span> algorithm.</h5>\n                            <p>\n                                While Bitcoin and Ethereum uses Proof-of-Work algorithm. Prestruct uses proof-of-stake for energy efficiency and to make people hold the governance over the network.\n                            </p>\n                            <button class=\"btn btn-primary\">Be a validator</button>\n                        </div>\n                        <div class=\"col-md-5 ms-auto\">\n                            {/* <div class=\"box-card box-bg-2\">\n                                <h3 class=\"text-center\">Be a validator</h3>\n                            </div> */}\n                            <img src=\"/tech-svg/img-8.svg\" width=\"100%\"></img>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"container text-light padding-top-100\">\n                    <div class=\"row\">\n                        <div class=\"col-md-5 me-auto\">\n                            {/* <div class=\"box-card box-bg-2\">\n                                <h3 class=\"text-center\">Be a validator</h3>\n                            </div> */}\n                            <img src=\"/tech-svg/img-2.svg\" width=\"100%\"></img>\n                        </div>\n                        <div class=\"col-md-6 mb-4 text-center text-md-end mt-auto mb-auto\">\n                            <h1>Never changing gas fees</h1>\n                            <h5>Prestruct gas fees are <span class=\"text-themecolor-1\">constant</span>.</h5>\n                            <p>\n                                With Prestruct gas fees are changeless, this means that even on longer blocks gas fees cost is fixed and unchangeable. \n                            </p>\n                            {/* <button class=\"btn btn-primary\">Be a validator</button> */}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"below-header-3\">\n                <div class=\"container text-light padding-top-100\">\n                    <div class=\"row\">\n                        <div class=\"col-md-4 mb-4 text-center text-md-start\">\n                            <h1>Stake on STRUCT</h1>\n                            {/* <h5>Prestruct runs on <span class=\"text-themecolor-1\">Proof-of-Stake</span> algorithm.</h5> */}\n                            <p>\n                                You can earn rewards by staking your <span class=\"text-themecolor-1\">STRUCT</span> for a period of time. Choose how you lock and stake, you can stake for only one time or divide your stakes and lock for different period of time. How you stake depends on you.\n                            </p>\n                            <button class=\"btn btn-primary\">Stake your STRUCT</button>\n                        </div>\n                        <div class=\"col-md-4 ms-auto\">\n                            <div class=\"box-card-sp box-bg-2\">\n                                <h3 class=\"text-center\">Estimate your rewards</h3>\n                                <label for=\"structStake\" class=\"form-label\">Stake <span class=\"text-themecolor-1\">100 STRUCT</span></label>\n                                <input type=\"range\" class=\"form-range\" id=\"structStake\"></input>\n                                <label for=\"structLock\" class=\"form-label\">Lock for <span class=\"text-themecolor-2\">30 Days</span></label>\n                                <input type=\"range\" class=\"form-range\" id=\"structLock\"></input>\n                                <hr/>\n                                <div class=\"d-flex\">\n                                    <div class=\"\">\n                                        Your rewards<br/>\n                                        <h5 class=\"text-themecolor-1\">5000 STRUCT</h5>\n                                    </div>\n                                    <div class=\"ms-auto\">\n                                        Current APR\n                                        <h5 class=\"text-themecolor-1\">13%</h5>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"container text-light padding-top-200 padding-bottom-200\">\n                    <div class=\"row\">\n                        <div class=\"col-md-4 me-auto mb-5\">\n                            <div class=\"box-card-sp-2 box-bg-1\">\n                                <h3 class=\"text-center\">Build and Deploy</h3>\n                            </div>\n                        </div>\n                        <div class=\"col-md-4 mb-4 text-center text-md-start\">\n                            <h1>Build on Prestruct</h1>\n                            <p>\n                                Prestruct is built based on etherum. You can easily code using solidity and deploy your own dapps and smart contracts on Prestruct network.\n                            </p>\n                            <button class=\"btn btn-primary\">See our documentation</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"footer\">\n                <div class=\"container text-center\">\n                    <h6><a href=\"http://paulreal.com\" target=\"_blank\" class=\"footer-link\">Paul Real</a> @ { new Date().getFullYear() }</h6>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Homepage\n","import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport Homepage from \"./homepage/Homepage\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    // await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <Homepage></Homepage>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 42</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}